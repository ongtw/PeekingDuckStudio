#:kivy 2.0.0
#:import hex kivy.utils.get_color_from_hex
#:import Factory kivy.factory.Factory

# Globals: colors
#:set BLACK 0, 0, 0, 1
#:set BLUE 0, 0, 1, 1
#:set DODGER_BLUE 30/255, 144/255, 1, 1
#:set GRAY 0.5, 0.5, 0.5, 1
#:set GREEN 0, 1, 0, 1
#:set NAVY 0, 0, 0.5, 1
#:set RED 1, 0, 0, 1
#:set ROYAL_BLUE 65/255, 105/255, 225/255, 1
#:set SILVER 192/255, 192/255, 192/255, 1
#:set WHITE 1, 1, 1, 1
#:set YELLOW 0.9, 0.9, 0, 1

# Globals: sizing
#:set HEADER_HEIGHT 40
#:set CONTROLS_HEIGHT 40
#:set NODE_HEIGHT 60
#:set NODE_PADDING 5
#:set CONFIG_HEIGHT 60
#:set CONFIG_PADDING 5

# Globals: GUI
#:set GUI_COLOR NAVY
#:set ARROW_DOWN "\u2193"
#:set ARROW_LEFT "\u2190"
#:set ARROW_RIGHT "\u2192"
#:set ARROW_UP "\u2191"
#:set ARROW_ANTICLOCKWISE "\u21BA"
#:set ARROW_CLOCKWISE "\u21BB"
#:set BLOCK_LEFT "\u258C"
#:set BLOCK_RIGHT "\u2590"
#:set EM_DASH "\u2014"
#:set EN_DASH "\u2013"
#:set IOTA "\u0196"
#:set LINE_VERTICAL "\u007C"
#:set SQUARE "\u25A0"
#:set TRIANGLE_DOWN "\u25BC"
#:set TRIANGLE_LEFT "\u25C4"
#:set TRIANGLE_RIGHT "\u25BA"
#:set TRIANGLE_UP "\u25B2"

#
# Helper Widgets
#
<ButtonLabel>:
    text: "ButtonLabel"
    # callback_press: app.btn_press
    # callback_release: app.btn_release

<FileLoadDialog>:
    BoxLayout:
        id: id_box
        orientation: "vertical"
        size: root.size
        pos: root.pos
        file_chooser: id_file_chooser.__self__
        FileChooserListView:
            id: id_file_chooser
            dirselect: True
        BoxLayout:
            size_hint_y: None
            height: 30
            Button:
                text: "Cancel"
                on_release: root.cancel()
            Button:
                text: "Select"
                on_release: root.select(id_file_chooser.path, id_file_chooser.selection)

<Header@BoxLayout>:
    font_color: 1, 1, 1, 1
    header_color: 0, 0, 0, 1
    header_text: ""
    size_hint: 1, None
    height: dp(HEADER_HEIGHT)
    canvas:
        Color:
            rgba: self.header_color
        Rectangle:
            size: self.size
            pos: self.pos
    Label:
        color: root.font_color
        text: root.header_text
        bold: True

<CustomSpinnerOptions@SpinnerOption>:
    background_normal: ""
    background_color: NAVY
    padding: dp(10), dp(10)
    canvas.before:
        Color:
            rgba: 192/255, 192/255, 192/255, 1
        Line:
            width: dp(1)
            rectangle: self.x, self.y, self.width, self.height

<CustomDropDown@DropDown>:
    max_height: dp(300)
    bar_width: dp(5)
    bar_color: GREEN
    bar_inactive_color: RED
    effect_cls: "ScrollEffect"
    scroll_type: ["bars", "content"]

<ConfigHeader@BoxLayout>:
    font_color: 1, 1, 1, 1
    header_color: 0, 0, 0, 1
    node_type: ""
    node_name: ""
    size_hint: 1, None
    height: dp(HEADER_HEIGHT)
    state: "enabled"
    callback_node_type: app.btn_node_type_select
    callback_node_name: app.btn_node_name_select
    canvas:
        Color:
            rgba: self.header_color
        Rectangle:
            size: self.size
            pos: self.pos
    Label:  # spacer
        text: ""
        size_hint_x: None
        width: dp(20)
    Spinner:
        id: spinner_node_type
        background_normal: ""
        background_color: root.header_color
        color: root.font_color
        bold: True
        padding: 10, 10
        size_hint: None, 1
        text: root.node_type
        width: dp(100)
        on_text:
            root.callback_node_type(self) if root.state == "enabled" else ""
        # dropdown_cls: Factory.CustomDropDown
        option_cls: Factory.CustomSpinnerOptions
    Label:
        id: the_dot
        text: ""
        size_hint_x: None
        width: dp(10)
    Spinner:
        id: spinner_node_name
        background_normal: ""
        background_color: root.header_color
        color: root.font_color
        bold: True
        size_hint: None, 1
        text: root.node_name
        width: dp(200)
        on_text:
            root.callback_node_name(self) if root.state == "enabled" else ""
        # dropdown_cls: Factory.CustomDropDown
        option_cls: Factory.CustomSpinnerOptions
    Label:  # spacer till end
        text: ""



<RoundedButton>:
    orientation: "horizontal"
    text: ""
    text_size: sp(15)
    callback_press: app.btn_press
    callback_release: app.btn_release
    tag: ""
    Separator:
        line_color: root.color_separator
        width: dp(2)
    Button:
        id: id_btn
        background_color: root.color_bkgd
        color: root.color_text
        font_name: "Arial"
        font_size: root.text_size
        text: root.text
        on_press: root.callback_press(self)
        on_release: root.callback_release(self)
        canvas.before:
            Color:
                rgba: root.color_normal if self.state == "normal" else root.color_pressed
            RoundedRectangle:
                size: self.size
                pos: self.pos
                radius: [dp(10),]
    Separator:
        line_color: root.color_separator
        width: dp(2)


<Separator@Label>:
    line_color: 1, 1, 1, 1
    direction: "vertical"
    size_hint: (1.0, None) if self.direction == "horizontal" else (None, 1.0)
    height: dp(1)
    width: dp(1)
    canvas.before:
        Color:
            rgba: self.line_color
        Rectangle:
            size: self.size
            pos: self.pos

<Node>:
    button: id_button
    cols: 2
    rows: 1
    padding: [dp(NODE_PADDING), dp(NODE_PADDING), dp(NODE_PADDING), dp(NODE_PADDING)]
    size_hint: (1, None)
    size: (0, dp(NODE_HEIGHT))
    callback_press: app.btn_node_press
    canvas.after:
        Color:
            rgba: root.select_color
        Rectangle:
            pos: self.pos
            size: self.size

    BoxLayout:
        size_hint_x: None
        width: dp(40)
        Label:
            text: root.node_number
    Button:
        id: id_button
        halign: "center"
        valign: "middle"
        text_size: self.size
        text: root.node_text
        color: 0, 0, 0, 1
        # on_press: root.callback_press(self)
        background_normal: ""
        background_color: root.bkgd_color


<NodeConfig>:
    cols: 5
    rows: 1
    padding: [dp(CONFIG_PADDING), dp(CONFIG_PADDING), dp(CONFIG_PADDING), dp(CONFIG_PADDING)]
    size_hint: (1, None)
    size: (0, dp(CONFIG_HEIGHT))
    callback_press: app.btn_config_press
    # for highlighting node if selected
    the_button: id_btn_config
    the_overlay: id_overlay
    canvas.after:
        Color:
            rgba: root.select_color
        Rectangle:
            pos: self.pos
            size: self.size
    BoxLayout:
        orientation: "vertical"
        size_hint_x: None
        width: dp(20)
        Label:
            size_hint_y: None
            height: dp(CONFIG_HEIGHT / 4)
        BoxLayout:
            size_hint_x: None
            width: dp(20)
            canvas.before:
                Color:
                    rgba: WHITE if root.config_set else GRAY
                Rectangle:
                    pos: self.pos
                    size: self.size
                Color:
                    rgba: BLACK
                Rectangle:
                    pos: self.x+dp(2), self.y+dp(2)
                    size: self.width-dp(4), self.height-dp(4)
                # indicator for user modified config
                Color:
                    rgba: YELLOW if root.config_set else BLACK
                Rectangle:
                    pos: self.x+dp(6), self.y+dp(6)
                    size: self.width-dp(12), self.height-dp(12)
        Label:
            size_hint_y: None
            height: dp(CONFIG_HEIGHT / 4)
    Separator:
        line_color: BLACK
        width: dp(5)
    BoxLayout:
        size_hint_x: None
        width: dp(200)
        Label:
            halign: "center"
            valign: "middle"
            text_size: self.size
            text: root.config_key
    Separator:
        line_color: BLACK
        width: dp(5)
    FloatLayout:
        Button:
            id: id_btn_config
            pos_hint: {"center_x": 0.5, "center_y": 0.5}
            size_hint: (1, 1)
            halign: "center"
            valign: "middle"
            text_size: self.size
            text: root.config_value
            on_press: root.callback_press(self)
            overlay: root.the_overlay
        BoxLayout:
            id: id_overlay
            pos_hint: {"center_x": 0.5, "center_y": 0.5}
            size_hint: (1, 1)
            tag: "the_overlay"


#
# Pipeline Widgets
#
<PipelineNodesScroll@ScrollView>:
    view: pipeline_layout
    scroll_wheel_distance: 40
    BoxLayout:
        id: pipeline_layout
        orientation: "vertical"
        size_hint: (1, None)
        height: self.minimum_height

<PipelineConfigScroll@ScrollView>:
    view: config_layout
    BoxLayout:
        id: config_layout
        orientation: "vertical"
        size_hint: (1, None)
        height: self.minimum_height

<NodeControls@BoxLayout>:
    padding: 10
    spacing: 10
    RoundedButton:
        tag: "node_add"
        text: "+"
        text_size: sp(20)
    RoundedButton:
        tag: "node_delete"
        text: EN_DASH
    RoundedButton:
        tag: "node_up"
        text: TRIANGLE_UP
        callback_press: app.btn_node_move_up_press
        callback_release: app.btn_node_move_up_release
    RoundedButton:
        tag: "node_down"
        text: TRIANGLE_DOWN
        callback_press: app.btn_node_move_down_press
        callback_release: app.btn_node_move_down_release

<PipelineControls@BoxLayout>:
    padding: 6
    spacing: 10
    RoundedButton:
        text: "Load"
        callback_press: app.btn_load_file
    RoundedButton:
        text: "Save"
        callback_press: app.btn_save_file
    RoundedButton:
        text: "Run"
        callback_press: app.btn_goto_screen_playback
    RoundedButton:
        text: "About"
        callback_press: app.btn_about
    RoundedButton:
        text: "Quit"
        callback_press: app.btn_quit


#
# Pipline Editor View
#
<PipelineView@BoxLayout>:
    config_state: "expand"
    BoxLayout:
        orientation: "vertical"
        size_hint_x: 0.4
        Header:
            id: pipeline_header
            header_color: GUI_COLOR
            header_text: "Pipeline"
        Separator:
            direction: "horizontal"
            line_color: BLACK
        PipelineNodesScroll:
            id: pipeline_nodes
        Separator:
            direction: "horizontal"
            line_color: BLACK
        NodeControls:
            id: node_controls
            size_hint_y: None
            height: dp(CONTROLS_HEIGHT)

    Separator:
        line_color: GUI_COLOR
        width: dp(5)

    BoxLayout:
        orientation: "vertical"
        BoxLayout:
            size_hint: 1, None
            height: dp(HEADER_HEIGHT)
            BoxLayout:
                # "toggle button" to show/hide node config items
                size_hint_x: None
                width: dp(30)
                canvas.before:
                    Color:
                        rgba: GUI_COLOR
                    Rectangle:
                        size: self.size
                        pos: self.pos
                RoundedButton:
                    color: pipeline_header.font_color
                    color_normal: GUI_COLOR
                    color_pressed: GUI_COLOR
                    color_separator: GUI_COLOR
                    text:
                        "" if root.config_state == "" else TRIANGLE_DOWN \
                        if root.config_state == "expand" else TRIANGLE_RIGHT
                    callback_release: app.btn_toggle_config_state
            ConfigHeader:
                id: pipeline_config_header
                header_color: GUI_COLOR
                node_type_text: "Node"
                node_name_text: "Config"
        Separator:
            direction: "horizontal"
            line_color: BLACK
        PipelineConfigScroll:
            id: pipeline_config
            size_hint: 1.0, 0.5


#
# Pipeline Editor Screen Definitions
#
#:set ATTR_WIDTH dp(100)
<ProjectInfo>:
    cols: 4
    rows: 3
    size_hint_y: None
    height: dp(100)

    # Kivy trick to span multiple GridLayout columns
    FloatLayout:
        size_hint: None, None
        size: 0, dp(40)
        BoxLayout:
            size_hint: None, None
            size: root.width, dp(30)
            pos_hint: {"x": 0.5, "center_y": 0.5}
            Label:
                text:"Pipeline Info"
    FloatLayout:
        size_hint: None, None
        size: 0, 0
    FloatLayout:
        size_hint: None, None
        size: 0, 0
    FloatLayout:
        size_hint: None, None
        size: 0, 0

    Separator:
        line_color: BLACK
        width: dp(20)
    Label:
        halign: "left"
        valign: "middle"
        text_size: self.size
        text: "Directory:"
        size_hint_x: None
        width: ATTR_WIDTH
    Separator:
        line_color: BLACK
        width: dp(20)
    Label:
        halign: "left"
        valign: "middle"
        text_size: self.size
        text: root.directory
 
    Separator:
        line_color: BLACK
        width: dp(20)
    Label:
        halign: "left"
        valign: "middle"
        text_size: self.size
        text: "Filename:"
        size_hint_x: None
        width: ATTR_WIDTH
    Separator:
        line_color: BLACK
        width: dp(20)
    Label:
        halign: "left"
        valign: "middle"
        text_size: self.size
        text: root.filename

<ScreenPipeline>:
    BoxLayout:
        orientation: "vertical"
        ProjectInfo:
            id: project_info
        PipelineView:
            id: pipeline_view
        Separator:
            direction: "horizontal"
            line_color: GUI_COLOR
            height: dp(5)
        PipelineControls:
            id: pipeline_controls
            size_hint_y: None
            height: dp(CONTROLS_HEIGHT)


#
# Pipeline Playback Screen Definitions
#
# Playback Output Widgets
<Output>:
    cols: 1
    rows: 2
    visible: False
    Image:
        id: image
    GridLayout:
        id: grid
        cols: 3
        rows: 1
        size_hint_y: None
        height: dp(CONTROLS_HEIGHT)
        Label:
            id: playback_speed
            text: "Speed: 1x"
            opacity: 1 if root.visible else 0
            size_hint_x: 0.2
        Slider: # this widget gets replaced dynamically during runtime
            id: slider
            opacity: 1 if root.visible else 0
            size_hint_x: 0.6
        Label:
            id: zoom
            text: "Zoom: 1.0"
            opacity: 1 if root.visible else 0
            size_hint_x: 0.2

<PeekingDuckControls@BoxLayout>:
    padding: 6
    spacing: 10
    RoundedButton:
        tag: "go_back"
        text: ARROW_LEFT
        text_size: sp(20)
        callback_press: app.btn_goto_screen_pipeline
    Separator:
        line_color: GUI_COLOR
    RoundedButton:
        id: btn_play_stop
        tag: "play"
        text: TRIANGLE_RIGHT if self.tag == "play" else SQUARE
        text_size: sp(20)
        callback_press: app.btn_play_stop_press
    RoundedButton:
        tag: "first_frame"
        text: LINE_VERTICAL + TRIANGLE_LEFT
        callback_press: app.btn_first_frame
    RoundedButton:
        tag: "backward"
        text: TRIANGLE_LEFT + TRIANGLE_LEFT
        callback_press: app.btn_backward_press
        callback_release: app.btn_backward_release
    RoundedButton:
        tag: "forward"
        text: TRIANGLE_RIGHT + TRIANGLE_RIGHT
        callback_press: app.btn_forward_press
        callback_release: app.btn_forward_release
    RoundedButton:
        tag: "last_frame"
        text: TRIANGLE_RIGHT + LINE_VERTICAL
        callback_press: app.btn_last_frame
    Separator:
        line_color: GUI_COLOR
    RoundedButton:
        tag: "zoom_out"
        text: "A"
        text_size: sp(10)
        callback_press: app.btn_zoom_out
    RoundedButton:
        tag: "zoom_in"
        text: "A"
        text_size: sp(20)
        callback_press: app.btn_zoom_in

<PeekingDuckView@BoxLayout>:
    orientation: "vertical"
    Header:
        id: pkd_header
        header_color: GUI_COLOR
        header_text: "PeekingDuck"
    Output:
        id: pkd_output
    PeekingDuckControls:
        id: pkd_controls
        size_hint_y: None
        height: dp(CONTROLS_HEIGHT)

<ScreenPlayback>:
    BoxLayout:
        PeekingDuckView:
            id: pkd_view