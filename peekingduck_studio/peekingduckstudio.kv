#:kivy 2.0.0
#:import hex kivy.utils.get_color_from_hex
#:import Factory kivy.factory.Factory
#:import Window kivy.core.window.Window

# Globals: colors
#:import BLACK peekingduck_studio.colors.BLACK
#:import BLUE peekingduck_studio.colors.BLUE
#:import DARK_BLUE peekingduck_studio.colors.DARK_BLUE
#:import DODGER_BLUE peekingduck_studio.colors.DODGER_BLUE
#:import GRAY peekingduck_studio.colors.GRAY
#:import GREEN peekingduck_studio.colors.GREEN
#:import NAVY peekingduck_studio.colors.NAVY
#:import ORANGE peekingduck_studio.colors.ORANGE
#:import RED peekingduck_studio.colors.RED
#:import ROYAL_BLUE peekingduck_studio.colors.ROYAL_BLUE
#:import SILVER peekingduck_studio.colors.SILVER
#:import WHITE peekingduck_studio.colors.WHITE
#:import YELLOW peekingduck_studio.colors.YELLOW
#:import GUI_COLOR peekingduck_studio.colors.GUI_COLOR
#:import CONFIG_COLOR peekingduck_studio.colors.CONFIG_COLOR
#:import TRANSPARENT peekingduck_studio.colors.TRANSPARENT

# Globals: sizing
#:set MIN_HEIGHT 1000
#:set MIN_WIDTH 1600
#:set BUTTON_HEIGHT_RATIO 0.04
#:set BUTTON_MIN_HEIGHT dp(40)
#:set BUTTON_FONT_SCALE 0.50
#:set BUTTON_FONT_SMALLER 0.40
#:set BUTTON_FONT_LARGER 0.75
#:import CONFIG_PADDING peekingduck_studio.gui_widgets.NODE_PADDING
#:import NODE_FONT_SCALE peekingduck_studio.gui_widgets.NODE_TEXT_SCALE
#:import NODE_PADDING peekingduck_studio.gui_widgets.NODE_PADDING
#:set CONFIG_INDICATOR_WIDTH 24
#:set HEADER_HEIGHT dp(40)
#:set HEADER_MIN_HEIGHT dp(40)
#:set HEADER_HEIGHT_RATIO 0.04
#:set RADIUS dp(12)
#:set PIPELINE_NODE_WIDTH 0.38
#:set PIPELINE_CONFIG_WIDTH 0.62
#:set PIPELINE_CONFIG_LABEL_RATIO 0.25

# Globals: text glyphs
#:set ARROW_DOWN "\u2193"
#:set ARROW_LEFT "\u2190"
#:set ARROW_RIGHT "\u2192"
#:set ARROW_UP "\u2191"
#:set ARROW_ANTICLOCKWISE "\u21BA"
#:set ARROW_CLOCKWISE "\u21BB"
#:set BLOCK_LEFT "\u258C"
#:set BLOCK_RIGHT "\u2590"
#:set EM_DASH "\u2014"
#:set EN_DASH "\u2013"
#:set HEBREW_PE "\u05E4"
#:set IOTA "\u0196"
#:set LINE_VERTICAL "\u007C"
#:set NOTES "\u266B"
#:set SQUARE "\u25A0"
#:set SUN "\u263C"
#:set TRIANGLE_DOWN "\u25BC"
#:set TRIANGLE_LEFT "\u25C4"
#:set TRIANGLE_RIGHT "\u25BA"
#:set TRIANGLE_UP "\u25B2"

#
# Helper Widgets
#
<Button3D>:
    tag: ""
    background_color: TRANSPARENT
    color: BLACK
    font_name: "Arial"
    font_size: sp(self.height * BUTTON_FONT_SCALE)   # scale font accordingly
    text_size: self.size
    halign: "center"
    valign: "bottom"
    padding_y:
        (self.height - self.font_size) / 2 \
        if self.state == "normal" and not self.depressed \
        else (self.height - self.font_size) / 2 - 4
    # need to redirect callbacks (cannot change on_press at runtime)
    on_press: self.callback_press(self)
    on_release: self.callback_release(self)
    callback_press: app.btn_press
    callback_release: app.btn_release
    # has_tooltip: True # tooltip still buggy, to re-engineer
    canvas.before:
        # shadow
        Color:
            rgba: self.color_shadow
        RoundedRectangle:
            size: self.size
            pos: (self.x, self.y - 6)
            radius: [dp(12),]
        # button
        Color:
            rgba:
                self.color_depressed if self.depressed else \
                self.color_normal if self.state == "normal" else self.color_pressed
        RoundedRectangle:
            size: self.size
            pos:
                self.pos if self.state == "normal" and not self.depressed \
                else (self.x, self.y - 4)
            radius: [dp(12),]


<MsgBoxPopup@Popup>:
    # Todo: re-engineer to mimic MFC MsgBox
    close_button: butt
    message: message
    auto_dismiss: False
    font_name: "Arial"
    font_size: sp(15)
    title: "MsgBox"
    title_size: self.font_size
    size_hint: None, None
    width: grid.width + dp(25)
    height: grid.height + root.title_size + dp(48)
    
    GridLayout:
        id: grid
        size_hint: None, None
        size: self.minimum_size
        padding: [10, 5]
        cols: 1
        Label:
        # spacer
            size_hint_y: None
            height: dp(10)
        AnchorLayout:
            anchor_x: "center"
            anchor_y: "bottom"
            size_hint: None, None
            height: message.height
            width: max(message.width, butt.width)
            Label: 
                id: message
                font_name: root.font_name
                font_size: root.font_size
                size_hint: None, None
                size: self.texture_size
                padding: [10, 5]
        Label:
        # spacer
            size_hint_y: None
            height: dp(10)
        Separator:
            direction: "horizontal"
        Label:
        # spacer
            size_hint_y: None
            height: dp(10)
        AnchorLayout:
            anchor_x: "center"
            anchor_y: "bottom"
            size_hint: None, None
            width: max(message.width, butt.width)
            height:
                dp(Window.height * BUTTON_HEIGHT_RATIO + 10) \
                if Window.height > MIN_HEIGHT else BUTTON_MIN_HEIGHT + dp(10)
            Button3D:
                id: butt
                text: "Close"
                font_size: root.font_size
                size_hint: None, 0.7
                width: self.texture_size[0] if self.texture_size[0] > 120 else 120
                on_release: root.dismiss()
        Label:
        # spacer
            size_hint_y: None
            height: dp(10)


[FileIconEntry@Widget]:
    locked: False
    path: ctx.path
    selected: self.path in ctx.controller().selection
    size_hint: None, None
    on_touch_down:
        self.collide_point(*args[1].pos) and ctx.controller().entry_touched(self, args[1])
    on_touch_up:
        self.collide_point(*args[1].pos) and ctx.controller().entry_released(self, args[1])
    # leave original sizes as comments for reference
    # size: '100dp', '100dp'
    height:
        dp(100 * (1.0 + 0.6 * (min(Window.height / Window.minimum_height, \
        Window.width / Window.minimum_width) - 1.0)))
    width: self.height
    canvas:
        Color:
            rgba: 1, 1, 1, 1 if self.selected else 0
        BorderImage:
            border: 8, 8, 8, 8
            pos: root.pos
            size: root.size
            source: 'atlas://data/images/defaulttheme/filechooser_selected'
    Image:
        # size: '48dp', '48dp'
        size: dp(0.5 * root.width), dp(0.5 * root.height)
        source: "atlas://data/images/defaulttheme/filechooser_%s" % ("folder" if ctx.isdir else "file")
        allow_stretch: True
        pos: root.x + dp(0.24 * root.width), root.y + dp(0.40 * root.height)
    Label:
        text: ctx.name
        font_name: ctx.controller().font_name
        font_size: sp(self.height)
        text_size: (root.width, self.height)    # prevent long text
        halign: 'center'
        shorten: True
        # size: '100dp', '16dp'
        size: dp(root.width), dp(0.16 * root.height)
        pos: root.x, root.y + dp(0.16 * root.height)
    Label:
        text: '{}'.format(ctx.get_nice_size())
        font_name: ctx.controller().font_name
        font_size: sp(self.height)
        color: .8, .8, .8, 1
        # size: '100dp', '16sp'
        size: dp(root.width), dp(0.16 * root.height)
        pos: root.pos
        halign: 'center'



[FileListEntry@FloatLayout+TreeViewNode]:
    locked: False
    entries: []
    path: ctx.path
    # FIXME: is_selected is actually a read_only treeview property. In this case,
    # however, we're doing this because treeview only has single-selection hardcoded in
    # it. The fix to this would be to update treeview to allow multiple selection.
    is_selected: self.path in ctx.controller().selection

    orientation: 'horizontal'
    size_hint_y: None
    height: dp(24 * (1.0 + 0.5 * (Window.height / Window.minimum_height - 1.0)))
    # Don't allow expansion of the ../ node
    is_leaf: not ctx.isdir or ctx.name.endswith('..' + ctx.sep) or self.locked
    on_touch_down:
        self.collide_point(*args[1].pos) and ctx.controller().entry_touched(self, args[1])
    on_touch_up:
        self.collide_point(*args[1].pos) and ctx.controller().entry_released(self, args[1])
    BoxLayout:
        pos: root.pos
        size_hint_x: None
        width: root.width - dp(10)
        Label:
            id: filename
            font_size: sp(self.height * 0.8)
            # size_hint_x: None
            # width: root.width - sz.width   # this allows filename Label to fill width less size Label
            text_size: self.width, None
            halign: 'left'
            shorten: True
            text: ctx.name
            font_name: ctx.controller().font_name
        Label:
            id: sz
            font_size: sp(self.height * 0.8)
            text_size: self.width, None
            size_hint_x: None
            width: self.texture_size[0]   # this makes the size Label to minimum width
            text: '{}'.format(ctx.get_nice_size())
            font_name: ctx.controller().font_name


<FileLoadDialog>:
    BoxLayout:
        id: id_box
        orientation: "vertical"
        size: root.size
        pos: root.pos
        file_chooser: id_file_chooser.__self__
        Label:
            text: id_file_chooser.path
            size_hint_y: None
            height: dp(30)
        Separator:
            direction: "horizontal"
            line_color: SILVER
        # Todo: allow user to toggle between both views
        FileChooserIconView:
        # FileChooserListView:
            id: id_file_chooser
            dirselect: True
            on_submit: app.load_file(*args)
        BoxLayout:
            size_hint_y: None
            height: dp(30)
            Button:
                text: "Cancel"
                on_release: root.cancel()
            Button:
                text: "Select"
                on_release: root.select(id_file_chooser, id_file_chooser.selection)


<FileSaveDialog>:
    text_input: text_input
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        Label:
            text: id_file_chooser.path
            size_hint_y: None
            height: dp(30)
        Separator:
            direction: "horizontal"
            line_color: SILVER
        FileChooserListView:
            id: id_file_chooser
            on_selection: text_input.text = self.selection and self.selection[0] or ''
        TextInput:
            id: text_input
            size_hint_y: None
            height: dp(30)
            multiline: False
        BoxLayout:
            size_hint_y: None
            height: dp(30)
            Button:
                text: "Cancel"
                on_release: root.cancel()
            Button:
                text: "Save"
                on_release: root.save(id_file_chooser.path, text_input.text)


<Header@BoxLayout>:
    # cannot use color constants here, will cause NoneType errors
    font_color: 1, 1, 1, 1
    header_color: 0, 0, 0, 1
    header_text: ""
    size_hint: 1, None
    height: dp(HEADER_HEIGHT)   # updated by respective controller
    canvas:
        Color:
            rgba: self.header_color
        Rectangle:
            size: self.size
            pos: self.pos
    Label:
        color: root.font_color
        text: root.header_text
        font_size: sp(self.height * BUTTON_FONT_SMALLER)
        bold: True


<CustomDropDown@DropDown>:
    # max_height: dp(Window.height // 3) # todo: scale (?)
    bar_width: dp(5)
    bar_color: GREEN
    bar_inactive_color: RED
    effect_cls: "ScrollEffect"
    scroll_type: ["bars", "content"]


<CustomSpinnerOptions@SpinnerOption>:
    background_normal: ""   # need this to set background_color
    background_color: GUI_COLOR
    font_size: sp(self.height * BUTTON_FONT_SMALLER)
    height: dp(40 * (1.0 + 0.3 * (Window.height / Window.minimum_height - 1.0)))
    size_hint_y: None
    canvas.before:
        Color:
            rgba: SILVER
        Line:
            width: dp(1)
            rectangle: self.x, self.y, self.width, self.height


<ConfigHeader@BoxLayout>:
    # cannot use color constants here, will cause NoneType errors (weird Kivy bug?)
    font_color: 1, 1, 1, 1
    header_color: 0, 0, 0, 1
    node_type: ""
    node_name: ""
    size_hint: 1, None
    height: dp(HEADER_HEIGHT)   # updated by respective controller
    state: "enabled"
    callback_node_type: app.btn_node_type_select
    callback_node_name: app.btn_node_name_select
    canvas:
        Color:
            rgba: self.header_color
        Rectangle:
            size: self.size
            pos: self.pos
    Label:
    # spacer
        text: ""
        size_hint_x: None
        width: dp(5)
    Spinner:
        id: spinner_node_type
        background_normal: ""
        background_color: root.header_color
        color: root.font_color
        bold: True
        text: root.node_type
        font_size: sp(self.height * BUTTON_FONT_SMALLER)
        size_hint: None, None
        height: root.height
        width: dp(root.width * PIPELINE_CONFIG_LABEL_RATIO)
        on_text:
            root.callback_node_type(self) if root.state == "enabled" else ""
        # dropdown_cls: Factory.CustomDropDown
        option_cls: Factory.CustomSpinnerOptions
    Label:
    # spacer
        text: ""
        size_hint_x: None
        width: dp(5)
    Spinner:
        id: spinner_node_name
        background_normal: ""
        background_color: root.header_color
        color: root.font_color
        bold: True
        font_size: sp(self.height * BUTTON_FONT_SMALLER)
        text: root.node_name
        size_hint: None, None
        height: root.height
        width: dp(root.width * 0.20)    # hardcode 20% here
        on_text:
            root.callback_node_name(self) if root.state == "enabled" else ""
        # dropdown_cls: Factory.CustomDropDown
        option_cls: Factory.CustomSpinnerOptions
    Label:
    # spacer till end
        text: ""


<RoundedButton>:
    # currently used for Node and NodeConfig (no 3D effect)
    tag: ""
    background_color: TRANSPARENT
    color: BLACK
    font_name: "Arial"
    font_size: sp(self.height * BUTTON_FONT_SCALE)   # scale font accordingly

    # to wrap long text
    text_size: (0.9 * self.size[0], self.size[1])
    halign: "center"
    valign: "middle"
    shorten: True

    on_press: self.callback_press(self)
    on_release: self.callback_release(self)
    # need to redirect callbacks (cannot change on_press at runtime)
    callback_press: app.btn_press
    callback_release: app.btn_release
    canvas.before:
        Color:
            rgba: self.color_normal if self.state == "normal" else self.color_pressed
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [RADIUS,]


<Separator@Label>:
    # cannot use color constants here, will cause NoneType errors
    line_color: 1, 1, 1, 1
    direction: "vertical"
    size_hint: (1.0, None) if self.direction == "horizontal" else (None, 1.0)
    height: dp(1)
    width: dp(1)
    canvas.before:
        Color:
            rgba: self.line_color
        Rectangle:
            size: self.size
            pos: self.pos


<Tooltip>:
    size_hint: None, None
    size: self.texture_size[0] + 10, self.texture_size[1] + 10
    color: BLACK
    canvas.before:
        Color:
            rgba: YELLOW
        Rectangle:
            size: self.size
            pos: self.pos


<Node>:
    button: id_button
    cols: 2
    rows: 1
    padding: [dp(NODE_PADDING), dp(NODE_PADDING), dp(NODE_PADDING), dp(NODE_PADDING)]
    size_hint: (1, None)
    height: self.node_height
    callback_press: app.btn_node_press
    canvas.after:
        Color:
            rgba: root.select_color
        Rectangle:
            pos: self.pos
            size: self.size

    BoxLayout:
        size_hint_x: None
        width: dp(40)
        Label:
            text: root.node_number
            font_size: sp(self.height * NODE_FONT_SCALE)
    RoundedButton:
        id: id_button
        halign: "center"
        valign: "middle"
        text: root.node_text
        font_size: sp(self.height * NODE_FONT_SCALE)
        color: BLACK
        color_normal: root.bkgd_color
        color_press: root.bkgd_color


<NodeConfig>:
    cols: 5
    rows: 1
    padding: [dp(CONFIG_PADDING), dp(CONFIG_PADDING), dp(CONFIG_PADDING), dp(CONFIG_PADDING)]
    size_hint: (1, None)
    height: self.node_height
    callback_press: app.btn_config_press
    callback_set_default_press: app.btn_config_set_default_press
    # for highlighting node if selected
    the_button: id_btn_config
    the_overlay: id_overlay
    canvas.after:
        Color:
            rgba: root.select_color
        Rectangle:
            pos: self.pos
            size: self.size
    BoxLayout:
    # default/user config indicator
        orientation: "vertical"
        size_hint_x: None
        width: dp((root.height - 2 * CONFIG_PADDING) / 2) - 2 * CONFIG_PADDING
        Label:
            size_hint_y: None
            height: dp(CONFIG_PADDING + (root.height - 2 * CONFIG_PADDING) / 4)
        BoxLayout:
            canvas.before:
                Color:
                    rgba: WHITE
                Rectangle:
                    pos: self.pos
                    size: self.size
                Color:
                    rgba: BLACK
                Rectangle:
                    pos: self.x + dp(0.05 * self.width), self.y + dp(0.05 * self.height)
                    size: dp(0.9 * self.width), dp(0.9 * self.height)
                # # indicator for user modified config
                Color:
                    rgba: RED if root.config_readonly else YELLOW if root.config_set else BLACK
                Rectangle:
                    pos: self.x + dp(0.25 * self.width), self.y + dp(0.25 * self.height)
                    size: dp(0.5 * self.width), dp(0.5 * self.height)
            # trick to get an invisible button that can still be pressed
            Button:
                text: "A"
                opacity: 0.0
                on_press: root.callback_set_default_press(self)
        Label:
            size_hint_y: None
            height: dp(CONFIG_PADDING + (root.height - 2 * CONFIG_PADDING) / 4)
    Separator:
        line_color: BLACK
        width: dp(5)
    BoxLayout:
    # config key text
        size_hint_x: None
        width: dp(root.width * PIPELINE_CONFIG_LABEL_RATIO)
        Label:
            halign: "center"
            valign: "middle"
            font_size: sp(self.height * NODE_FONT_SCALE)
            text_size: self.size
            text: root.config_key
            color: RED if root.config_readonly else WHITE
    Separator:
        line_color: BLACK
        width: dp(5)
    FloatLayout:
    # config value text
        RoundedButton:
            id: id_btn_config
            pos_hint: {"center_x": 0.5, "center_y": 0.5}
            size_hint: (1, 1)
            halign: "center"
            valign: "middle"
            text: root.config_value
            font_size: sp(self.height * NODE_FONT_SCALE)
            color: RED if root.config_readonly else BLACK
            color_normal: GRAY if root.config_readonly else CONFIG_COLOR
            callback_press: root.callback_press
            overlay: root.the_overlay
            has_tooltip: root.has_tooltip
        BoxLayout:
            id: id_overlay
            pos_hint: {"center_x": 0.5, "center_y": 0.5}
            size_hint: (0.98 if Window.width > MIN_WIDTH else 0.96, 1)
            tag: "the_overlay"
            background_color: CONFIG_COLOR


#
# Pipeline Widgets
#
<PipelineNodesScroll@ScrollView>:
    view: pipeline_layout
    scroll_wheel_distance: 40
    BoxLayout:
        id: pipeline_layout
        orientation: "vertical"
        size_hint: (1, None)
        height: self.minimum_height


<PipelineConfigScroll@ScrollView>:
    view: config_layout
    BoxLayout:
        id: config_layout
        orientation: "vertical"
        size_hint: (1, None)
        height: self.minimum_height


<NodeControls@BoxLayout>:
    orientation: "vertical"
    BoxLayout:
        canvas:
            Color:
                rgba: GUI_COLOR
            RoundedRectangle:
                size: self.size
                pos: self.pos
                radius: [dp(12),]
        size_hint_x: 0.9
        pos_hint: {"center_x": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(20)
        Button3D:
            tag: "node_add"
            text: "+"
            callback_press: app.btn_node_add
            size_hint_y: 0.6
            pos_hint: {"center_y": 0.5}
            tooltip_text: "Add a new pipeline node"
        Separator:
            line_color: TRANSPARENT
            width: dp(10)
        Button3D:
            tag: "node_delete"
            text: EN_DASH
            callback_press: app.btn_node_delete
            size_hint_y: 0.6
            pos_hint: {"center_y": 0.5}
            tooltip_text: "Delete selected pipeline node"
        Separator:
            line_color: TRANSPARENT
            width: dp(10)
        Button3D:
            tag: "node_up"
            text: TRIANGLE_UP
            callback_press: app.btn_node_move_up_press
            callback_release: app.btn_node_move_up_release
            size_hint_y: 0.6
            pos_hint: {"center_y": 0.5}
            tooltip_text: "Move selected pipeline node up"
        Separator:
            line_color: TRANSPARENT
            width: dp(10)
        Button3D:
            tag: "node_down"
            text: TRIANGLE_DOWN
            callback_press: app.btn_node_move_down_press
            callback_release: app.btn_node_move_down_release
            size_hint_y: 0.6
            pos_hint: {"center_y": 0.5}
            tooltip_text: "Move selected pipeline node down"
        Separator:
            line_color: TRANSPARENT
            width: dp(20)


<PipelineControls@BoxLayout>:
    orientation: "vertical"
    BoxLayout:
        canvas:
            Color:
                rgba: GUI_COLOR
            RoundedRectangle:
                size: self.size
                pos: self.pos
                radius: [dp(12),]
        size_hint_x: 0.9
        pos_hint: {"center_x": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(20)
        Button3D:
            text: "New"
            callback_press: app.btn_new_file
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(10)
        Button3D:
            text: "Load"
            callback_press: app.btn_load_file
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(10)
        Button3D:
            text: "Save"
            callback_press: app.btn_save_file
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(10)
        Button3D:
            text: "Run"
            callback_press: app.btn_goto_screen_playback
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(10)
        Button3D:
            text: "Yaml"
            callback_press: app.btn_yaml
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(30)
        Button3D:
            text: "About"
            callback_press: app.btn_about
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(10)
        Button3D:
            text: "Quit"
            callback_press: app.btn_quit
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(20)


#
# Pipline Editor View
#
<PipelineView@BoxLayout>:
    config_state: "expand"

    BoxLayout:
    # pipeline node panel (left)
        orientation: "vertical"
        size_hint_x: PIPELINE_NODE_WIDTH
        Header:
            id: pipeline_header
            header_color: GUI_COLOR
            header_text: "Pipeline"
        Separator:
            direction: "horizontal"
            line_color: BLACK
        PipelineNodesScroll:
            id: pipeline_nodes
        Separator:
            direction: "horizontal"
            height: dp(0.01 * root.parent.height)
            line_color: TRANSPARENT
        NodeControls:
        # pipeline editor buttons
            id: node_controls
            size_hint_y: None
            height:
                dp(root.parent.height * BUTTON_HEIGHT_RATIO + 20) \
                if root.parent.height > MIN_HEIGHT else BUTTON_MIN_HEIGHT + dp(20)
        Separator:
            direction: "horizontal"
            height: dp(0.01 * root.parent.height)
            line_color: TRANSPARENT

    Separator:
        line_color: GUI_COLOR
        width: dp(5)

    BoxLayout:
    # pipeline config panel (right)
        orientation: "vertical"
        BoxLayout:
            size_hint: 1, None
            height: dp(HEADER_HEIGHT)   # NB: to be updated when ConfigHeader.height changes
            BoxLayout:
                # "toggle button" to show/hide node config items
                size_hint_x: None
                # parent.height=(node height)/2, below formula from NodeConfig to align column 1
                width: dp((2 * self.parent.height - 2 * CONFIG_PADDING) / 2)
                canvas.before:
                    Color:
                        rgba: GUI_COLOR
                    Rectangle:
                        size: self.size
                        pos: self.pos
                RoundedButton:
                    color: pipeline_header.font_color
                    color_normal: GUI_COLOR
                    color_pressed: GUI_COLOR
                    text:
                        "" if root.config_state == "" else TRIANGLE_DOWN \
                        if root.config_state == "expand" else TRIANGLE_RIGHT
                    callback_release: app.btn_toggle_config_state
            ConfigHeader:
                id: pipeline_config_header
                header_color: GUI_COLOR
                node_type_text: "Node"
                node_name_text: "Config"
        Separator:
            direction: "horizontal"
            line_color: BLACK
        PipelineConfigScroll:
            id: pipeline_config
            size_hint: 1.0, 0.5


#
# Pipeline Editor Screen Definitions
#
<ProjectInfo>:
    cols: 5
    rows: 3
    # row 1: using Kivy trick to span multiple GridLayout columns
    FloatLayout:
        size_hint: None, None
        size: 0, root.height // root.rows
        BoxLayout:
            size_hint: None, None
            size: root.width, root.height // root.rows
            pos_hint: {"x": 0.5, "center_y": 0.5}
            Label:
                text:"Pipeline Info"
                font_size: max(sp(15), sp(self.height * BUTTON_FONT_SMALLER))
    FloatLayout:
        size_hint: None, None
        size: 0, 0
    FloatLayout:
        size_hint: None, None
        size: 0, 0
    FloatLayout:
        size_hint: None, None
        size: 0, 0
    FloatLayout:
        size_hint: None, None
        size: 0, 0
    # row 2
    Separator:
        line_color: TRANSPARENT
        width: dp(20)
    Label:
        halign: "left"
        valign: "middle"
        text_size: self.size
        text: "Directory:"
        font_size: max(sp(15), sp(self.height * BUTTON_FONT_SMALLER))
        size_hint_x: 0.10
    Separator:
        line_color: TRANSPARENT
        width: dp(20)
    Label:
        halign: "left"
        valign: "middle"
        text_size: self.size
        text: root.directory
        font_size: max(sp(15), sp(self.height * BUTTON_FONT_SMALLER))
    Separator:
        line_color: TRANSPARENT
        width: dp(20)
    # row 3
    Separator:
        line_color: BLACK
        width: dp(20)
    Label:
        halign: "left"
        valign: "middle"
        text_size: self.size
        text: "Filename:"
        font_size: max(sp(15), sp(self.height * BUTTON_FONT_SMALLER))
        size_hint_x: 0.10
    Separator:
        line_color: TRANSPARENT
        width: dp(20)
    Label:
        halign: "left"
        valign: "middle"
        text_size: self.size
        text: root.filename
        font_size: max(sp(15), sp(self.height * BUTTON_FONT_SMALLER))
    Separator:
        line_color: BLACK
        width: dp(20)


<ScreenPipeline>:
    BoxLayout:
        orientation: "vertical"
        canvas.before:
            Color:
                rgba: GUI_COLOR
            Rectangle:
                pos: self.pos
                size: self.size
        Separator:
            direction: "horizontal" # top margin
            line_color: GUI_COLOR
            height: dp(0.01 * root.height)
        BoxLayout:
            orientation: "vertical"
            pos_hint: {"x":0.01}
            size_hint_x: 0.98
            canvas.before:
                Color:
                    rgba: BLACK
                RoundedRectangle:
                    pos: self.pos
                    size: self.size
                    radius: [RADIUS,]
            BoxLayout:
                size_hint_y: None
                height: dp(0.12 * root.height)
                BoxLayout:
                    orientation: "vertical"
                    size_hint_x: PIPELINE_NODE_WIDTH / 2
                    Image:
                        source: "AISG_Logo_1536x290.png"
                        allow_stretch: True
                        keep_ratio: True
                        size_hint: None, None
                        width: self.parent.width
                        height: self.parent.width / self.image_ratio
                    Label:
                        color: ORANGE
                        text: "PeekingDuck Studio by the Computer Vision Hub"
                        font_size: max(sp(15), sp(self.height * 0.2))
                        text_size: 0.95 * self.parent.width, None
                        size: self.texture_size
                        halign: "center"
                        valign: "middle"
                ProjectInfo:
                    id: project_info
                    size_hint_y: None
                    height: dp(0.12 * root.height)
            PipelineView:
                id: pipeline_view
        Separator:
            direction: "horizontal"
            line_color: GUI_COLOR
            height: dp(0.01 * root.height)
        PipelineControls:
            id: pipeline_controls   # pipeline control buttons
            pos_hint: {"x":0.01}
            size_hint: 0.98, None
            height:
                dp(root.height * BUTTON_HEIGHT_RATIO + 10) \
                if root.height > MIN_HEIGHT else BUTTON_MIN_HEIGHT + dp(10)
        Separator:
            direction: "horizontal" # bottom margin
            line_color: GUI_COLOR
            height: dp(0.01 * root.height)


#
# Pipeline Playback Screen Definitions
#
# Playback Output Widgets
<Output>:
    cols: 1
    rows: 2
    visible: False
    BoxLayout:
        Image:
            id: image
            # experiment with image scaling (doesn't work well, see python code technotes)
            # pos_hint: {"center_x":0.5, "center_y":0.5}
            # size_hint: (None, None)
            # allow_stretch: True
    GridLayout:
        id: grid
        cols: 4
        rows: 1
        height:
            dp(root.height * BUTTON_HEIGHT_RATIO) \
            if root.height > MIN_HEIGHT else BUTTON_MIN_HEIGHT
        size_hint_y: None
        Label:
            id: playback_speed
            text: "Speed: 1x"
            font_size: sp(self.height * BUTTON_FONT_SMALLER)
            opacity: 1 if root.visible else 0
            size_hint_x: 0.25
        Slider:
            id: slider  # this widget gets replaced dynamically during runtime
            opacity: 1 if root.visible else 0
            size_hint_x: 0.5
        Label:
            id: frame_counter
            text: "1"
            font_size: sp(self.height * BUTTON_FONT_SMALLER)
            opacity: 1 if root.visible else 0
            size_hint_x: 0.125
        Label:
            id: zoom
            text: "Zoom: 1.0"
            font_size: sp(self.height * BUTTON_FONT_SMALLER)
            opacity: 1 if root.visible else 0
            size_hint_x: 0.125


<PeekingDuckControls@BoxLayout>:
    orientation: "vertical"
    BoxLayout:
        canvas:
            Color:
                rgba: GUI_COLOR
            RoundedRectangle:
                size: self.size
                pos: self.pos
                radius: [dp(12),]
        size_hint_x: 0.9
        pos_hint: {"center_x": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(20)
        Button3D:
            tag: "go_back"
            text: ARROW_LEFT
            callback_press: app.btn_goto_screen_pipeline
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(10)
        Button3D:
            id: btn_replay
            tag: "replay"
            text: SUN
            callback_press: app.btn_replay_press
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(30)
        Button3D:
            id: btn_play_stop
            tag: "play"
            text: TRIANGLE_RIGHT if self.tag == "play" else SQUARE
            callback_press: app.btn_play_stop_press
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(10)
        Button3D:
            id: btn_loop
            tag: "loop"
            text: HEBREW_PE
            callback_press: app.btn_loop
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(10)
        Button3D:
            tag: "first_frame"
            text: LINE_VERTICAL + TRIANGLE_LEFT
            callback_press: app.btn_first_frame
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(10)
        Button3D:
            tag: "backward"
            text: TRIANGLE_LEFT + TRIANGLE_LEFT
            callback_press: app.btn_backward_press
            callback_release: app.btn_backward_release
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(10)
        Button3D:
            tag: "forward"
            text: TRIANGLE_RIGHT + TRIANGLE_RIGHT
            callback_press: app.btn_forward_press
            callback_release: app.btn_forward_release
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(10)
        Button3D:
            tag: "last_frame"
            text: TRIANGLE_RIGHT + LINE_VERTICAL
            callback_press: app.btn_last_frame
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(30)
        Button3D:
            tag: "zoom_out"
            text: "A"
            font_size: sp(self.height * BUTTON_FONT_SMALLER)
            callback_press: app.btn_zoom_out
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(10)
        Button3D:
            tag: "zoom_in"
            text: "A"
            font_size: sp(self.height * BUTTON_FONT_LARGER)
            callback_press: app.btn_zoom_in
            size_hint_y: 0.7
            pos_hint: {"center_y": 0.5}
        Separator:
            line_color: TRANSPARENT
            width: dp(20)


<PeekingDuckView@BoxLayout>:
    orientation: "vertical"
    canvas.before:
        Color:
            rgba: GUI_COLOR
        Rectangle:
            pos: self.pos
            size: self.size
    Separator:
    # top margin
        direction: "horizontal"
        line_color: GUI_COLOR
        height: dp(0.01 * root.height)
    BoxLayout:
        orientation: "vertical"
        pos_hint: {"x": 0.01}
        size_hint_x: 0.98
        canvas.before:
            Color:
                rgba: BLACK
            RoundedRectangle:
                pos: self.pos
                size: self.size
                radius: [RADIUS,]
        BoxLayout:
            size_hint_y: None
            height: dp(HEADER_HEIGHT)   # to be updated when pkd_header.height changes
            Separator:
                line_color: TRANSPARENT
                width: dp(20)
            Header:
                id: pkd_header
                header_text: "PeekingDuckStudio"
            Separator:
                line_color: TRANSPARENT
                width: dp(20)
        Output:
            id: pkd_output
        Separator:
        # spacer below progress bar/slider
            direction: "horizontal"
            line_color: TRANSPARENT
            height: dp(10)
    Separator:
        direction: "horizontal"
        line_color: GUI_COLOR
        height: dp(0.01 * root.height)
    PeekingDuckControls:
    # output playback buttons
        id: pkd_controls
        pos_hint: {"x": 0.01}
        size_hint: 1.00, None
        height:
            dp(root.height * BUTTON_HEIGHT_RATIO + 10) \
            if root.height > MIN_HEIGHT else BUTTON_MIN_HEIGHT + dp(10)
    Separator:
    # bottom margin
        direction: "horizontal"
        line_color: GUI_COLOR
        height: dp(0.01 * root.height)


<ScreenPlayback>:
    BoxLayout:
        PeekingDuckView:
            id: pkd_view
